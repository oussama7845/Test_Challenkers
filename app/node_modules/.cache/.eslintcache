[{"C:\\Test_Challenkers\\app\\src\\index.js":"1","C:\\Test_Challenkers\\app\\src\\app.js":"2","C:\\Test_Challenkers\\app\\src\\components\\citations\\mesCitations.tsx":"3","C:\\Test_Challenkers\\app\\src\\components\\citations\\btnsCitations.js":"4","C:\\Test_Challenkers\\app\\src\\components\\citations\\createSearch.js":"5","C:\\Test_Challenkers\\app\\src\\components\\popups\\create.js":"6","C:\\Test_Challenkers\\app\\src\\components\\popups\\delete.js":"7","C:\\Test_Challenkers\\app\\src\\components\\popups\\edit.js":"8","C:\\Test_Challenkers\\app\\src\\components\\citations\\displayCitations.js":"9","C:\\Test_Challenkers\\app\\src\\components\\citations\\favoriteCitation.tsx":"10"},{"size":207,"mtime":1689674087850,"results":"11","hashOfConfig":"12"},{"size":698,"mtime":1689901000217,"results":"13","hashOfConfig":"12"},{"size":5372,"mtime":1689897950577,"results":"14","hashOfConfig":"12"},{"size":2840,"mtime":1689896773366,"results":"15","hashOfConfig":"12"},{"size":3333,"mtime":1689896482381,"results":"16","hashOfConfig":"12"},{"size":4522,"mtime":1689901284743,"results":"17","hashOfConfig":"12"},{"size":1413,"mtime":1689900739969,"results":"18","hashOfConfig":"12"},{"size":5503,"mtime":1689901343334,"results":"19","hashOfConfig":"12"},{"size":10997,"mtime":1689902288806,"results":"20","hashOfConfig":"12"},{"size":1398,"mtime":1689898464572,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"bbeo6d",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Test_Challenkers\\app\\src\\index.js",[],[],[],"C:\\Test_Challenkers\\app\\src\\app.js",["57"],[],"C:\\Test_Challenkers\\app\\src\\components\\citations\\mesCitations.tsx",[],[],"C:\\Test_Challenkers\\app\\src\\components\\citations\\btnsCitations.js",[],[],[],"C:\\Test_Challenkers\\app\\src\\components\\citations\\createSearch.js",[],[],"C:\\Test_Challenkers\\app\\src\\components\\popups\\create.js",["58","59"],[],"import React, { useState } from \"react\";\r\nimport \"../css/edit.css\";\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction Create({ showCreatePopup, closeCreatePopup }) {\r\n  const [citation, setCitation] = useState(\"\");\r\n  const [auteur, setAuteur] = useState(\"\");\r\n  const [acteur, setActeur] = useState(\"\");\r\n  const [personnage, setPersonnage] = useState(\"\");\r\n  const [saison, setSaison] = useState(\"\");\r\n  const [episode, setEpisode] = useState(\"\");\r\n\r\n  const confirmCreateCitation = async () => {\r\n    try {\r\n      let body = {\r\n        citation: citation,\r\n        auteur: auteur,\r\n        acteur: acteur,\r\n        personnage: personnage,\r\n        saison: saison,\r\n        episode: episode,\r\n      };\r\n\r\n      const response = await axios.post(\"http://localhost:3000/create_Citation\",body);\r\n\r\n      if (response.status === 201) {\r\n         closeCreatePopup(); // appeler la function qui close le pop up\r\n         window.location.reload();\r\n        toast.success(\"Citation enregistrée avec succès\");\r\n\r\n        \r\n      } else {\r\n        toast.error(\"erreur\");\r\n\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast.error(\"erreur\");\r\n    }\r\n  };\r\n\r\n\r\n  return showCreatePopup ? (\r\n\r\n    \r\n<div id=\"app\">\r\n      <div className='popup'>\r\n        <div className=\"profile-popup-content\">\r\n          <div className=\"title-profile\">\r\n            <h2>Créer votre Citation</h2>\r\n            <div className=\"line3\"></div>\r\n          </div>\r\n          <div className=\"colonne-step\">\r\n            <div className=\"colonnne-step1-grid1\">\r\n              <div className=\"input-field\">\r\n                <label >Citation</label>\r\n                <input\r\n                  id=\"citation\"\r\n                  value={citation}\r\n                  onChange={(e) => setCitation(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"Créer votre citation\"\r\n                />\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <label >auteur</label>\r\n                <input\r\n                  id=\"auteur\"\r\n                  value={auteur}\r\n                  onChange={(e) => setAuteur(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"Nom de l'auteur\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <label >episode</label>\r\n                <input\r\n                  id=\"episode\"\r\n                  value={episode}\r\n                  onChange={(e) => setEpisode(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"quelle épisode ?\"\r\n                />\r\n              </div>\r\n\r\n   \r\n            </div>\r\n            <div className=\"colonnne-step1-grid2\">\r\n              <div className=\"input-field\">\r\n                <label >acteur</label>\r\n                <input\r\n                  id=\"acteur\"\r\n                  value={acteur}\r\n                  onChange={(e) => setActeur(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"Nom de l'acteur\"\r\n                />\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <label >\r\n                personnage\r\n                 \r\n                </label>\r\n                <input\r\n                  value={personnage}\r\n                  onChange={(e) => setPersonnage(e.target.value)}\r\n                  id=\"personnage\"\r\n                  type=\"text\"\r\n                  placeholder=\"Nom de personnage\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <label >saison</label>\r\n                <input\r\n                  id=\"saison\"\r\n                  value={saison}\r\n                  onChange={(e) => setSaison(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"quelle saison ?\"\r\n                />\r\n              </div>\r\n\r\n     \r\n\r\n              \r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"button-colonne margin\">\r\n            <div className=\"container_btn_invite\">\r\n              <a onClick={confirmCreateCitation}  href=\"#\" className=\"btn1\">\r\n                Confirmer\r\n              </a>\r\n            </div>\r\n            <div className=\"container_btn_invite\">\r\n              <a onClick={closeCreatePopup} href=\"#\" className=\"btn1\">\r\n                Cancel\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  ) : null;\r\n}\r\n\r\nexport default Create;\r\n\r\n\r\n",[],"C:\\Test_Challenkers\\app\\src\\components\\popups\\delete.js",["60"],[],"C:\\Test_Challenkers\\app\\src\\components\\popups\\edit.js",["61","62","63"],[],"import React, { useState, useEffect } from \"react\";\r\nimport \"../css/edit.css\";\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\n\r\n \r\nfunction Edit({ detectSignalEdit,resetSignal, showEditPopup, idCitation, closeEditPopup }) {\r\n\r\n    const [citation, setCitation] = useState('');\r\n    const [auteur, setAuteur] = useState('');\r\n    const [acteur, setActeur] = useState('');\r\n    const [personnage, setPersonnage] = useState('');\r\n    const [saison, setSaison] = useState('');\r\n    const [episode, setEpisode] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    if (detectSignalEdit) {\r\n      getCitationDetails();\r\n      resetSignal();\r\n    }\r\n  }, [detectSignalEdit]);\r\n\r\n\r\n    const getCitationDetails = async () => {\r\n    \r\n    try {\r\n      console.log(\"id\",idCitation)\r\n      \r\n\r\n      const response = await axios.get(`http://localhost:3000/fetchCitationById/${idCitation}`);\r\n      \r\n      const { data, status } = response;\r\n      if (status === 200) {\r\n        setCitation(data.citation);\r\n        setAuteur(data.auteur);\r\n        setActeur(data.acteur);\r\n        setPersonnage(data.personnage);\r\n        setSaison(data.saison);\r\n        setEpisode(data.episode);\r\n\r\n\r\n\r\n     \r\n      } else {\r\n        throw new Error('Erreur lors de la récupération des citations.');\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n    \r\n\r\n\r\n    const confirm = async () => {\r\n      try {\r\n        let body = {\r\n          citation: citation,\r\n          auteur: auteur,\r\n          acteur: acteur,\r\n          personnage: personnage,\r\n          saison: saison,\r\n          episode: episode,\r\n        };\r\n  \r\n        const response = await axios.put(`http://localhost:3000/edit_Citation/${idCitation}`,body);\r\n  \r\n        if (response.status === 200) {\r\n          closeEditPopup(); // appeler la function qui close le pop up\r\n           window.location.reload();\r\n          toast.success(\"Citation modifiée avec succès\");\r\n  \r\n          \r\n        } else {\r\n          toast.error(\"erreur\");\r\n  \r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        toast.error(\"erreur\");\r\n      }\r\n    };\r\n\r\n\r\n\r\n  return showEditPopup ? (\r\n\r\n    \r\n<div id=\"app\">\r\n      <div className='popup'>\r\n        <div className=\"profile-popup-content\">\r\n          <div className=\"title-profile\">\r\n            <h2>Modifier votre Citation</h2>\r\n            <div className=\"line3\"></div>\r\n          </div>\r\n          <div className=\"colonne-step\">\r\n            <div className=\"colonnne-step1-grid1\">\r\n              <div className=\"input-field\">\r\n                <label >Citation</label>\r\n                <input\r\n                  id=\"citation\"\r\n                  Value={citation}\r\n                  onChange={(e) => setCitation(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"modifier votre citation\"\r\n                />\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <label >auteur</label>\r\n                <input\r\n                  id=\"auteur\"\r\n                  Value={auteur}\r\n                  onChange={(e) => setAuteur(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"modifier le nom de l'auteur\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <label >episode</label>\r\n                <input\r\n                  id=\"episode\"\r\n                  Value={episode}\r\n                  onChange={(e) => setEpisode(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"quelle épisode ?\"\r\n                />\r\n              </div>\r\n\r\n   \r\n            </div>\r\n            <div className=\"colonnne-step1-grid2\">\r\n              <div className=\"input-field\">\r\n                <label >acteur</label>\r\n                <input\r\n                  id=\"acteur\"\r\n                  defaultValue={acteur}\r\n                  onChange={(e) => setActeur(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"modifier le nom de l'auteur\"\r\n                />\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <label >\r\n                personnage\r\n                 \r\n                </label>\r\n                <input\r\n                  defaultValue={personnage}\r\n                  onChange={(e) => setPersonnage(e.target.value)}\r\n                  id=\"personnage\"\r\n                  type=\"text\"\r\n                  placeholder=\"modifier le nom de personnage\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <label >saison</label>\r\n                <input\r\n                  id=\"saison\"\r\n                  defaultValue={saison}\r\n                  onChange={(e) => setSaison(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"quelle saison ?\"\r\n                />\r\n              </div>\r\n\r\n     \r\n\r\n              \r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"button-colonne margin\">\r\n            <div className=\"container_btn_invite\">\r\n              <a  href=\"#\" className=\"btn1\" onClick={confirm}>\r\n                Confirmer\r\n              </a>\r\n            </div>\r\n            <div className=\"container_btn_invite\">\r\n              <a onClick={closeEditPopup} href=\"#\" className=\"btn1\">\r\n                Cancel\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n  ) : null;\r\n}\r\n\r\nexport default Edit;\r\n\r\n\r\n","C:\\Test_Challenkers\\app\\src\\components\\citations\\displayCitations.js",["64","65","66"],[],"C:\\Test_Challenkers\\app\\src\\components\\citations\\favoriteCitation.tsx",[],[],{"ruleId":"67","severity":1,"message":"68","line":6,"column":26,"nodeType":"69","messageId":"70","endLine":6,"endColumn":31},{"ruleId":"71","severity":1,"message":"72","line":135,"column":15,"nodeType":"73","endLine":135,"endColumn":77},{"ruleId":"71","severity":1,"message":"72","line":140,"column":15,"nodeType":"73","endLine":140,"endColumn":71},{"ruleId":"67","severity":1,"message":"74","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":22,"column":6,"nodeType":"77","endLine":22,"endColumn":24,"suggestions":"78"},{"ruleId":"71","severity":1,"message":"72","line":178,"column":15,"nodeType":"73","endLine":178,"endColumn":63},{"ruleId":"71","severity":1,"message":"72","line":183,"column":15,"nodeType":"73","endLine":183,"endColumn":69},{"ruleId":"75","severity":1,"message":"79","line":25,"column":6,"nodeType":"77","endLine":25,"endColumn":30,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":32,"column":6,"nodeType":"77","endLine":32,"endColumn":37,"suggestions":"82"},{"ruleId":"71","severity":1,"message":"72","line":280,"column":15,"nodeType":"73","endLine":280,"endColumn":78},"no-unused-vars","'toast' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCitationDetails' and 'resetSignal'. Either include them or remove the dependency array. If 'resetSignal' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["83"],"React Hook useEffect has missing dependencies: 'getRandomCitation' and 'resetSignal'. Either include them or remove the dependency array. If 'resetSignal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["84"],"React Hook useEffect has a missing dependency: 'resetKaamelottSignal'. Either include it or remove the dependency array. If 'resetKaamelottSignal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["85"],{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [detectSignalEdit, getCitationDetails, resetSignal]",{"range":"92","text":"93"},"Update the dependencies array to be: [detectSignalMyCitation, getRandomCitation, resetSignal]",{"range":"94","text":"95"},"Update the dependencies array to be: [detectSignalKaamelottCitation, resetKaamelottSignal]",{"range":"96","text":"97"},[663,681],"[detectSignalEdit, getCitationDetails, resetSignal]",[769,793],"[detectSignalMyCitation, getRandomCitation, resetSignal]",[942,973],"[detectSignalKaamelottCitation, resetKaamelottSignal]"]